1. Создать двух пользователей (с помощью метода User.objects.create_user).

user1 = User.objects.create(username='Ron', first_name='Smith')  
user2 = User.objects.create(username='Mary', first_name='Stuart')    

2. Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(authorUser=user1)
Author.objects.create(authorUser=user2)

3. Добавить 4 категории в модель Category.

Category.objects.create(name='Politics')
Category.objects.create(name='World')
Category.objects.create(name='Sport')
Category.objects.create(name='Theater')

4. Добавить 2 статьи и 1 новость.

Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Ron')), categoryType='NW', title='News 1', text='News news news')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Ron')), categoryType='AR', title='Article 1', text='Text article1')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Mary')), categoryType='AR', title='Article 2', text='Text article2')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

p1 = Post.objects.get(pk=1)
p2 = Post.objects.get(pk=2)
p3 = Post.objects.get(pk=3)
c1 = Category.objects.get(name='World')
c2 = Category.objects.get(name='Sport')

   # Связи

p1.postCategory.add(c1)
p2.postCategory.add(c1, c2)
p3.postCategory.add(c2)

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(commentUser=User.objects.get(username='Mike'), commentPost= Post.objects.get(pk=1), text='Good comment')
Comment.objects.create(commentUser=User.objects.get(username='Mike'), commentPost= Post.objects.get(pk=2), text='Bad comment')
Comment.objects.create(commentUser=User.objects.get(username='Mary'), commentPost= Post.objects.get(pk=3), text='Great comment')
Comment.objects.create(commentUser=User.objects.get(username='Mary'), commentPost= Post.objects.get(pk=1), text='Terrible comment')

7.Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=2).dislike()
Post.objects.get(pk=1).like()
Post.objects.get(pk=3).like()
Post.objects.get(pk=2).dislike()

Comment.objects.get(pk=1).like()
Comment.objects.get(pk2).like()
Comment.objects.get(pk=2).like() 
Comment.objects.get(pk=1).like() 
Comment.objects.get(pk=3).dislike()
Comment.objects.get(pk=2).like()

8. Обновить рейтинги пользователей.

Author.objects.get(authorUser=User.objects.get(username='Ron')).update_rating()
Author.objects.get(authorUser=User.objects.get(username='Mary')).update_rating()
a = Author.objects.get(authorUser=User.objects.get(username='Ron'))
a.ratingAuthor
Author.objects.get(authorUser=User.objects.get(username='Mary')).ratingAuthor

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

best = Author.objects.all().order_by('-ratingAuthor').values('authorUser__username', 'ratingAuthor')[0]
print(best)

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

c = Post.objects.all().order_by('-rating').values('dateCreation', 'author__authorUser__username', 'rating', 'title')[0]                    
print(c)

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

Comment.objects.all().order_by('-rating').values('commentUser__username', 'commentPost__author__authorUser__username', 'text', 'dateCreation', 'rating')[0]









